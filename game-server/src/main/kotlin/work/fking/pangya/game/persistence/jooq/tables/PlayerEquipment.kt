/*
 * This file is generated by jOOQ.
 */
package work.fking.pangya.game.persistence.jooq.tables


import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row6
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.jackson.extensions.converters.JSONtoJacksonConverter

import work.fking.pangya.game.persistence.jooq.Public
import work.fking.pangya.game.persistence.jooq.keys.PLAYER_EQUIPMENT_PKEY
import work.fking.pangya.game.persistence.jooq.keys.PLAYER_EQUIPMENT__FK_PLAYER_STATISTICS__ACCOUNT
import work.fking.pangya.game.persistence.jooq.tables.records.PlayerEquipmentRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PlayerEquipment(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, PlayerEquipmentRecord>?,
    aliased: Table<PlayerEquipmentRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<PlayerEquipmentRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.player_equipment</code>
         */
        val PLAYER_EQUIPMENT: PlayerEquipment = PlayerEquipment()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PlayerEquipmentRecord> = PlayerEquipmentRecord::class.java

    /**
     * The column <code>public.player_equipment.account_uid</code>.
     */
    val ACCOUNT_UID: TableField<PlayerEquipmentRecord, Int?> = createField(DSL.name("account_uid"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.player_equipment.item_iff_ids</code>.
     */
    val ITEM_IFF_IDS: TableField<PlayerEquipmentRecord, IntArray?> = createField(DSL.name("item_iff_ids"), SQLDataType.JSON.nullable(false), this, "", JSONtoJacksonConverter<IntArray>(IntArray::class.java))

    /**
     * The column <code>public.player_equipment.character_uid</code>.
     */
    val CHARACTER_UID: TableField<PlayerEquipmentRecord, Int?> = createField(DSL.name("character_uid"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.player_equipment.caddie_uid</code>.
     */
    val CADDIE_UID: TableField<PlayerEquipmentRecord, Int?> = createField(DSL.name("caddie_uid"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.player_equipment.club_set_uid</code>.
     */
    val CLUB_SET_UID: TableField<PlayerEquipmentRecord, Int?> = createField(DSL.name("club_set_uid"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.player_equipment.comet_iff_id</code>.
     */
    val COMET_IFF_ID: TableField<PlayerEquipmentRecord, Int?> = createField(DSL.name("comet_iff_id"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<PlayerEquipmentRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<PlayerEquipmentRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.player_equipment</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.player_equipment</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.player_equipment</code> table reference
     */
    constructor(): this(DSL.name("player_equipment"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, PlayerEquipmentRecord>): this(Internal.createPathAlias(child, key), child, key, PLAYER_EQUIPMENT, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<PlayerEquipmentRecord> = PLAYER_EQUIPMENT_PKEY
    override fun getReferences(): List<ForeignKey<PlayerEquipmentRecord, *>> = listOf(PLAYER_EQUIPMENT__FK_PLAYER_STATISTICS__ACCOUNT)

    private lateinit var _account: Account

    /**
     * Get the implicit join path to the <code>public.account</code> table.
     */
    fun account(): Account {
        if (!this::_account.isInitialized)
            _account = Account(this, PLAYER_EQUIPMENT__FK_PLAYER_STATISTICS__ACCOUNT)

        return _account;
    }

    val account: Account
        get(): Account = account()
    override fun `as`(alias: String): PlayerEquipment = PlayerEquipment(DSL.name(alias), this)
    override fun `as`(alias: Name): PlayerEquipment = PlayerEquipment(alias, this)
    override fun `as`(alias: Table<*>): PlayerEquipment = PlayerEquipment(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PlayerEquipment = PlayerEquipment(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PlayerEquipment = PlayerEquipment(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PlayerEquipment = PlayerEquipment(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row6<Int?, IntArray?, Int?, Int?, Int?, Int?> = super.fieldsRow() as Row6<Int?, IntArray?, Int?, Int?, Int?, Int?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, IntArray?, Int?, Int?, Int?, Int?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, IntArray?, Int?, Int?, Int?, Int?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
