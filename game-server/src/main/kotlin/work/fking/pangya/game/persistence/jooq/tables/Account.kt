/*
 * This file is generated by jOOQ.
 */
package work.fking.pangya.game.persistence.jooq.tables


import java.time.OffsetDateTime
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row8
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import work.fking.pangya.game.persistence.jooq.AlterPangya
import work.fking.pangya.game.persistence.jooq.indexes.IDX__ACCOUNT_NICKNAME
import work.fking.pangya.game.persistence.jooq.indexes.IDX__ACCOUNT_USERNAME
import work.fking.pangya.game.persistence.jooq.indexes.IDX__ACCOUNT_UUID
import work.fking.pangya.game.persistence.jooq.keys.ACCOUNT_PKEY
import work.fking.pangya.game.persistence.jooq.tables.records.AccountRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Account(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, AccountRecord>?,
    aliased: Table<AccountRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<AccountRecord>(
    alias,
    AlterPangya.ALTER_PANGYA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>alter_pangya.account</code>
         */
        val ACCOUNT: Account = Account()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<AccountRecord> = AccountRecord::class.java

    /**
     * The column <code>alter_pangya.account.uid</code>.
     */
    val UID: TableField<AccountRecord, Int?> = createField(DSL.name("uid"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>alter_pangya.account.uuid</code>.
     */
    val UUID: TableField<AccountRecord, java.util.UUID?> = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>alter_pangya.account.username</code>.
     */
    val USERNAME: TableField<AccountRecord, String?> = createField(DSL.name("username"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>alter_pangya.account.nickname</code>.
     */
    val NICKNAME: TableField<AccountRecord, String?> = createField(DSL.name("nickname"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>alter_pangya.account.password</code>.
     */
    val PASSWORD: TableField<AccountRecord, ByteArray?> = createField(DSL.name("password"), SQLDataType.BLOB.nullable(false), this, "")

    /**
     * The column <code>alter_pangya.account.pang_balance</code>.
     */
    val PANG_BALANCE: TableField<AccountRecord, Long?> = createField(DSL.name("pang_balance"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>alter_pangya.account.cookie_balance</code>.
     */
    val COOKIE_BALANCE: TableField<AccountRecord, Long?> = createField(DSL.name("cookie_balance"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>alter_pangya.account.created_at</code>.
     */
    val CREATED_AT: TableField<AccountRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    private constructor(alias: Name, aliased: Table<AccountRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<AccountRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>alter_pangya.account</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>alter_pangya.account</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>alter_pangya.account</code> table reference
     */
    constructor(): this(DSL.name("account"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, AccountRecord>): this(Internal.createPathAlias(child, key), child, key, ACCOUNT, null)
    override fun getSchema(): Schema? = if (aliased()) null else AlterPangya.ALTER_PANGYA
    override fun getIndexes(): List<Index> = listOf(IDX__ACCOUNT_NICKNAME, IDX__ACCOUNT_USERNAME, IDX__ACCOUNT_UUID)
    override fun getIdentity(): Identity<AccountRecord, Int?> = super.getIdentity() as Identity<AccountRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<AccountRecord> = ACCOUNT_PKEY
    override fun `as`(alias: String): Account = Account(DSL.name(alias), this)
    override fun `as`(alias: Name): Account = Account(alias, this)
    override fun `as`(alias: Table<*>): Account = Account(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Account = Account(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Account = Account(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Account = Account(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row8<Int?, java.util.UUID?, String?, String?, ByteArray?, Long?, Long?, OffsetDateTime?> = super.fieldsRow() as Row8<Int?, java.util.UUID?, String?, String?, ByteArray?, Long?, Long?, OffsetDateTime?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, java.util.UUID?, String?, String?, ByteArray?, Long?, Long?, OffsetDateTime?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, java.util.UUID?, String?, String?, ByteArray?, Long?, Long?, OffsetDateTime?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
