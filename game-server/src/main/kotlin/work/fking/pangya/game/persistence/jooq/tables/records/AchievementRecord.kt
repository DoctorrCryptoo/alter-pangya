/*
 * This file is generated by jOOQ.
 */
package work.fking.pangya.game.persistence.jooq.tables.records


import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl

import work.fking.pangya.game.persistence.jooq.tables.Achievement


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AchievementRecord private constructor() : UpdatableRecordImpl<AchievementRecord>(Achievement.ACHIEVEMENT), Record3<Int?, Int?, Int?> {

    open var iffId: Int
        set(value): Unit = set(0, value)
        get(): Int = get(0) as Int

    open var completedWithMilestone: Int
        set(value): Unit = set(1, value)
        get(): Int = get(1) as Int

    open var category: Int
        set(value): Unit = set(2, value)
        get(): Int = get(2) as Int

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<Int?, Int?, Int?> = super.fieldsRow() as Row3<Int?, Int?, Int?>
    override fun valuesRow(): Row3<Int?, Int?, Int?> = super.valuesRow() as Row3<Int?, Int?, Int?>
    override fun field1(): Field<Int?> = Achievement.ACHIEVEMENT.IFF_ID
    override fun field2(): Field<Int?> = Achievement.ACHIEVEMENT.COMPLETED_WITH_MILESTONE
    override fun field3(): Field<Int?> = Achievement.ACHIEVEMENT.CATEGORY
    override fun component1(): Int = iffId
    override fun component2(): Int = completedWithMilestone
    override fun component3(): Int = category
    override fun value1(): Int = iffId
    override fun value2(): Int = completedWithMilestone
    override fun value3(): Int = category

    override fun value1(value: Int?): AchievementRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Int?): AchievementRecord {
        set(1, value)
        return this
    }

    override fun value3(value: Int?): AchievementRecord {
        set(2, value)
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: Int?): AchievementRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised AchievementRecord
     */
    constructor(iffId: Int, completedWithMilestone: Int, category: Int): this() {
        this.iffId = iffId
        this.completedWithMilestone = completedWithMilestone
        this.category = category
        resetChangedOnNotNull()
    }
}
