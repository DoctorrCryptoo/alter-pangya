/*
 * This file is generated by jOOQ.
 */
package work.fking.pangya.game.persistence.jooq.tables


import java.time.OffsetDateTime
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row5
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import work.fking.pangya.game.persistence.jooq.AlterPangya
import work.fking.pangya.game.persistence.jooq.indexes.IDX_PLAYER_ACHIEVEMENT_MILESTONE
import work.fking.pangya.game.persistence.jooq.keys.PLAYER_ACHIEVEMENT_MILESTONE_PKEY
import work.fking.pangya.game.persistence.jooq.keys.PLAYER_ACHIEVEMENT_MILESTONE__FK_PLAYER_ACHIEVEMENT_MILESTONE__PLAYER_ACHIEVEMENT
import work.fking.pangya.game.persistence.jooq.tables.records.PlayerAchievementMilestoneRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PlayerAchievementMilestone(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, PlayerAchievementMilestoneRecord>?,
    aliased: Table<PlayerAchievementMilestoneRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<PlayerAchievementMilestoneRecord>(
    alias,
    AlterPangya.ALTER_PANGYA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>alter_pangya.player_achievement_milestone</code>
         */
        val PLAYER_ACHIEVEMENT_MILESTONE: PlayerAchievementMilestone = PlayerAchievementMilestone()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PlayerAchievementMilestoneRecord> = PlayerAchievementMilestoneRecord::class.java

    /**
     * The column <code>alter_pangya.player_achievement_milestone.uid</code>.
     */
    val UID: TableField<PlayerAchievementMilestoneRecord, Int?> = createField(DSL.name("uid"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column
     * <code>alter_pangya.player_achievement_milestone.player_achievement_uid</code>.
     */
    val PLAYER_ACHIEVEMENT_UID: TableField<PlayerAchievementMilestoneRecord, Int?> = createField(DSL.name("player_achievement_uid"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>alter_pangya.player_achievement_milestone.iff_id</code>.
     */
    val IFF_ID: TableField<PlayerAchievementMilestoneRecord, Int?> = createField(DSL.name("iff_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column
     * <code>alter_pangya.player_achievement_milestone.progress</code>.
     */
    val PROGRESS: TableField<PlayerAchievementMilestoneRecord, Int?> = createField(DSL.name("progress"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "")

    /**
     * The column
     * <code>alter_pangya.player_achievement_milestone.completed_at</code>.
     */
    val COMPLETED_AT: TableField<PlayerAchievementMilestoneRecord, OffsetDateTime?> = createField(DSL.name("completed_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    private constructor(alias: Name, aliased: Table<PlayerAchievementMilestoneRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<PlayerAchievementMilestoneRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>alter_pangya.player_achievement_milestone</code>
     * table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>alter_pangya.player_achievement_milestone</code>
     * table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>alter_pangya.player_achievement_milestone</code> table
     * reference
     */
    constructor(): this(DSL.name("player_achievement_milestone"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, PlayerAchievementMilestoneRecord>): this(Internal.createPathAlias(child, key), child, key, PLAYER_ACHIEVEMENT_MILESTONE, null)
    override fun getSchema(): Schema? = if (aliased()) null else AlterPangya.ALTER_PANGYA
    override fun getIndexes(): List<Index> = listOf(IDX_PLAYER_ACHIEVEMENT_MILESTONE)
    override fun getIdentity(): Identity<PlayerAchievementMilestoneRecord, Int?> = super.getIdentity() as Identity<PlayerAchievementMilestoneRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<PlayerAchievementMilestoneRecord> = PLAYER_ACHIEVEMENT_MILESTONE_PKEY
    override fun getReferences(): List<ForeignKey<PlayerAchievementMilestoneRecord, *>> = listOf(PLAYER_ACHIEVEMENT_MILESTONE__FK_PLAYER_ACHIEVEMENT_MILESTONE__PLAYER_ACHIEVEMENT)

    private lateinit var _playerAchievement: PlayerAchievement

    /**
     * Get the implicit join path to the
     * <code>alter_pangya.player_achievement</code> table.
     */
    fun playerAchievement(): PlayerAchievement {
        if (!this::_playerAchievement.isInitialized)
            _playerAchievement = PlayerAchievement(this, PLAYER_ACHIEVEMENT_MILESTONE__FK_PLAYER_ACHIEVEMENT_MILESTONE__PLAYER_ACHIEVEMENT)

        return _playerAchievement;
    }

    val playerAchievement: PlayerAchievement
        get(): PlayerAchievement = playerAchievement()
    override fun `as`(alias: String): PlayerAchievementMilestone = PlayerAchievementMilestone(DSL.name(alias), this)
    override fun `as`(alias: Name): PlayerAchievementMilestone = PlayerAchievementMilestone(alias, this)
    override fun `as`(alias: Table<*>): PlayerAchievementMilestone = PlayerAchievementMilestone(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PlayerAchievementMilestone = PlayerAchievementMilestone(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PlayerAchievementMilestone = PlayerAchievementMilestone(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PlayerAchievementMilestone = PlayerAchievementMilestone(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row5<Int?, Int?, Int?, Int?, OffsetDateTime?> = super.fieldsRow() as Row5<Int?, Int?, Int?, Int?, OffsetDateTime?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, Int?, Int?, Int?, OffsetDateTime?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, Int?, Int?, Int?, OffsetDateTime?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
