/*
 * This file is generated by jOOQ.
 */
package work.fking.pangya.game.persistence.jooq.tables.records


import java.time.OffsetDateTime
import java.util.UUID

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl

import work.fking.pangya.game.persistence.jooq.tables.Account


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AccountRecord private constructor() : UpdatableRecordImpl<AccountRecord>(Account.ACCOUNT), Record8<Int?, UUID?, String?, String?, ByteArray?, Long?, Long?, OffsetDateTime?> {

    open var uid: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var uuid: UUID
        set(value): Unit = set(1, value)
        get(): UUID = get(1) as UUID

    open var username: String
        set(value): Unit = set(2, value)
        get(): String = get(2) as String

    open var nickname: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var password: ByteArray
        set(value): Unit = set(4, value)
        get(): ByteArray = get(4) as ByteArray

    open var pangBalance: Long
        set(value): Unit = set(5, value)
        get(): Long = get(5) as Long

    open var cookieBalance: Long
        set(value): Unit = set(6, value)
        get(): Long = get(6) as Long

    open var createdAt: OffsetDateTime?
        set(value): Unit = set(7, value)
        get(): OffsetDateTime? = get(7) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<Int?, UUID?, String?, String?, ByteArray?, Long?, Long?, OffsetDateTime?> = super.fieldsRow() as Row8<Int?, UUID?, String?, String?, ByteArray?, Long?, Long?, OffsetDateTime?>
    override fun valuesRow(): Row8<Int?, UUID?, String?, String?, ByteArray?, Long?, Long?, OffsetDateTime?> = super.valuesRow() as Row8<Int?, UUID?, String?, String?, ByteArray?, Long?, Long?, OffsetDateTime?>
    override fun field1(): Field<Int?> = Account.ACCOUNT.UID
    override fun field2(): Field<UUID?> = Account.ACCOUNT.UUID
    override fun field3(): Field<String?> = Account.ACCOUNT.USERNAME
    override fun field4(): Field<String?> = Account.ACCOUNT.NICKNAME
    override fun field5(): Field<ByteArray?> = Account.ACCOUNT.PASSWORD
    override fun field6(): Field<Long?> = Account.ACCOUNT.PANG_BALANCE
    override fun field7(): Field<Long?> = Account.ACCOUNT.COOKIE_BALANCE
    override fun field8(): Field<OffsetDateTime?> = Account.ACCOUNT.CREATED_AT
    override fun component1(): Int? = uid
    override fun component2(): UUID = uuid
    override fun component3(): String = username
    override fun component4(): String? = nickname
    override fun component5(): ByteArray = password
    override fun component6(): Long = pangBalance
    override fun component7(): Long = cookieBalance
    override fun component8(): OffsetDateTime? = createdAt
    override fun value1(): Int? = uid
    override fun value2(): UUID = uuid
    override fun value3(): String = username
    override fun value4(): String? = nickname
    override fun value5(): ByteArray = password
    override fun value6(): Long = pangBalance
    override fun value7(): Long = cookieBalance
    override fun value8(): OffsetDateTime? = createdAt

    override fun value1(value: Int?): AccountRecord {
        set(0, value)
        return this
    }

    override fun value2(value: UUID?): AccountRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): AccountRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): AccountRecord {
        set(3, value)
        return this
    }

    override fun value5(value: ByteArray?): AccountRecord {
        set(4, value)
        return this
    }

    override fun value6(value: Long?): AccountRecord {
        set(5, value)
        return this
    }

    override fun value7(value: Long?): AccountRecord {
        set(6, value)
        return this
    }

    override fun value8(value: OffsetDateTime?): AccountRecord {
        set(7, value)
        return this
    }

    override fun values(value1: Int?, value2: UUID?, value3: String?, value4: String?, value5: ByteArray?, value6: Long?, value7: Long?, value8: OffsetDateTime?): AccountRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised AccountRecord
     */
    constructor(uid: Int? = null, uuid: UUID, username: String, nickname: String? = null, password: ByteArray, pangBalance: Long, cookieBalance: Long, createdAt: OffsetDateTime? = null): this() {
        this.uid = uid
        this.uuid = uuid
        this.username = username
        this.nickname = nickname
        this.password = password
        this.pangBalance = pangBalance
        this.cookieBalance = cookieBalance
        this.createdAt = createdAt
        resetChangedOnNotNull()
    }
}
