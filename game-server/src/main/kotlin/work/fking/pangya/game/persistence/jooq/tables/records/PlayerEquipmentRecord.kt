/*
 * This file is generated by jOOQ.
 */
package work.fking.pangya.game.persistence.jooq.tables.records


import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.UpdatableRecordImpl

import work.fking.pangya.game.persistence.jooq.tables.PlayerEquipment


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PlayerEquipmentRecord private constructor() : UpdatableRecordImpl<PlayerEquipmentRecord>(PlayerEquipment.PLAYER_EQUIPMENT), Record6<Int?, IntArray?, Int?, Int?, Int?, Int?> {

    open var accountUid: Int
        set(value): Unit = set(0, value)
        get(): Int = get(0) as Int

    open var itemIffIds: IntArray
        set(value): Unit = set(1, value)
        get(): IntArray = get(1) as IntArray

    open var characterUid: Int
        set(value): Unit = set(2, value)
        get(): Int = get(2) as Int

    open var caddieUid: Int
        set(value): Unit = set(3, value)
        get(): Int = get(3) as Int

    open var clubSetUid: Int
        set(value): Unit = set(4, value)
        get(): Int = get(4) as Int

    open var cometIffId: Int
        set(value): Unit = set(5, value)
        get(): Int = get(5) as Int

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row6<Int?, IntArray?, Int?, Int?, Int?, Int?> = super.fieldsRow() as Row6<Int?, IntArray?, Int?, Int?, Int?, Int?>
    override fun valuesRow(): Row6<Int?, IntArray?, Int?, Int?, Int?, Int?> = super.valuesRow() as Row6<Int?, IntArray?, Int?, Int?, Int?, Int?>
    override fun field1(): Field<Int?> = PlayerEquipment.PLAYER_EQUIPMENT.ACCOUNT_UID
    override fun field2(): Field<IntArray?> = PlayerEquipment.PLAYER_EQUIPMENT.ITEM_IFF_IDS
    override fun field3(): Field<Int?> = PlayerEquipment.PLAYER_EQUIPMENT.CHARACTER_UID
    override fun field4(): Field<Int?> = PlayerEquipment.PLAYER_EQUIPMENT.CADDIE_UID
    override fun field5(): Field<Int?> = PlayerEquipment.PLAYER_EQUIPMENT.CLUB_SET_UID
    override fun field6(): Field<Int?> = PlayerEquipment.PLAYER_EQUIPMENT.COMET_IFF_ID
    override fun component1(): Int = accountUid
    override fun component2(): IntArray = itemIffIds
    override fun component3(): Int = characterUid
    override fun component4(): Int = caddieUid
    override fun component5(): Int = clubSetUid
    override fun component6(): Int = cometIffId
    override fun value1(): Int = accountUid
    override fun value2(): IntArray = itemIffIds
    override fun value3(): Int = characterUid
    override fun value4(): Int = caddieUid
    override fun value5(): Int = clubSetUid
    override fun value6(): Int = cometIffId

    override fun value1(value: Int?): PlayerEquipmentRecord {
        set(0, value)
        return this
    }

    override fun value2(value: IntArray?): PlayerEquipmentRecord {
        set(1, value)
        return this
    }

    override fun value3(value: Int?): PlayerEquipmentRecord {
        set(2, value)
        return this
    }

    override fun value4(value: Int?): PlayerEquipmentRecord {
        set(3, value)
        return this
    }

    override fun value5(value: Int?): PlayerEquipmentRecord {
        set(4, value)
        return this
    }

    override fun value6(value: Int?): PlayerEquipmentRecord {
        set(5, value)
        return this
    }

    override fun values(value1: Int?, value2: IntArray?, value3: Int?, value4: Int?, value5: Int?, value6: Int?): PlayerEquipmentRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        return this
    }

    /**
     * Create a detached, initialised PlayerEquipmentRecord
     */
    constructor(accountUid: Int, itemIffIds: IntArray, characterUid: Int, caddieUid: Int, clubSetUid: Int, cometIffId: Int): this() {
        this.accountUid = accountUid
        this.itemIffIds = itemIffIds
        this.characterUid = characterUid
        this.caddieUid = caddieUid
        this.clubSetUid = clubSetUid
        this.cometIffId = cometIffId
        resetChangedOnNotNull()
    }
}
