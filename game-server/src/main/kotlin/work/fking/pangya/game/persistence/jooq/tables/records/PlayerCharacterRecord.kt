/*
 * This file is generated by jOOQ.
 */
package work.fking.pangya.game.persistence.jooq.tables.records


import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record11
import org.jooq.Row11
import org.jooq.impl.UpdatableRecordImpl

import work.fking.pangya.game.persistence.jooq.tables.PlayerCharacter


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PlayerCharacterRecord private constructor() : UpdatableRecordImpl<PlayerCharacterRecord>(PlayerCharacter.PLAYER_CHARACTER), Record11<Int?, Int?, Int?, Int?, IntArray?, IntArray?, IntArray?, Int?, IntArray?, Int?, IntArray?> {

    open var uid: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var accountUid: Int
        set(value): Unit = set(1, value)
        get(): Int = get(1) as Int

    open var iffId: Int
        set(value): Unit = set(2, value)
        get(): Int = get(2) as Int

    open var hairColor: Int
        set(value): Unit = set(3, value)
        get(): Int = get(3) as Int

    open var partIffIds: IntArray
        set(value): Unit = set(4, value)
        get(): IntArray = get(4) as IntArray

    open var partUids: IntArray
        set(value): Unit = set(5, value)
        get(): IntArray = get(5) as IntArray

    open var auxParts: IntArray
        set(value): Unit = set(6, value)
        get(): IntArray = get(6) as IntArray

    open var cutinIffId: Int
        set(value): Unit = set(7, value)
        get(): Int = get(7) as Int

    open var stats: IntArray
        set(value): Unit = set(8, value)
        get(): IntArray = get(8) as IntArray

    open var mastery: Int
        set(value): Unit = set(9, value)
        get(): Int = get(9) as Int

    open var cards: IntArray
        set(value): Unit = set(10, value)
        get(): IntArray = get(10) as IntArray

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record11 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row11<Int?, Int?, Int?, Int?, IntArray?, IntArray?, IntArray?, Int?, IntArray?, Int?, IntArray?> = super.fieldsRow() as Row11<Int?, Int?, Int?, Int?, IntArray?, IntArray?, IntArray?, Int?, IntArray?, Int?, IntArray?>
    override fun valuesRow(): Row11<Int?, Int?, Int?, Int?, IntArray?, IntArray?, IntArray?, Int?, IntArray?, Int?, IntArray?> = super.valuesRow() as Row11<Int?, Int?, Int?, Int?, IntArray?, IntArray?, IntArray?, Int?, IntArray?, Int?, IntArray?>
    override fun field1(): Field<Int?> = PlayerCharacter.PLAYER_CHARACTER.UID
    override fun field2(): Field<Int?> = PlayerCharacter.PLAYER_CHARACTER.ACCOUNT_UID
    override fun field3(): Field<Int?> = PlayerCharacter.PLAYER_CHARACTER.IFF_ID
    override fun field4(): Field<Int?> = PlayerCharacter.PLAYER_CHARACTER.HAIR_COLOR
    override fun field5(): Field<IntArray?> = PlayerCharacter.PLAYER_CHARACTER.PART_IFF_IDS
    override fun field6(): Field<IntArray?> = PlayerCharacter.PLAYER_CHARACTER.PART_UIDS
    override fun field7(): Field<IntArray?> = PlayerCharacter.PLAYER_CHARACTER.AUX_PARTS
    override fun field8(): Field<Int?> = PlayerCharacter.PLAYER_CHARACTER.CUTIN_IFF_ID
    override fun field9(): Field<IntArray?> = PlayerCharacter.PLAYER_CHARACTER.STATS
    override fun field10(): Field<Int?> = PlayerCharacter.PLAYER_CHARACTER.MASTERY
    override fun field11(): Field<IntArray?> = PlayerCharacter.PLAYER_CHARACTER.CARDS
    override fun component1(): Int? = uid
    override fun component2(): Int = accountUid
    override fun component3(): Int = iffId
    override fun component4(): Int = hairColor
    override fun component5(): IntArray = partIffIds
    override fun component6(): IntArray = partUids
    override fun component7(): IntArray = auxParts
    override fun component8(): Int = cutinIffId
    override fun component9(): IntArray = stats
    override fun component10(): Int = mastery
    override fun component11(): IntArray = cards
    override fun value1(): Int? = uid
    override fun value2(): Int = accountUid
    override fun value3(): Int = iffId
    override fun value4(): Int = hairColor
    override fun value5(): IntArray = partIffIds
    override fun value6(): IntArray = partUids
    override fun value7(): IntArray = auxParts
    override fun value8(): Int = cutinIffId
    override fun value9(): IntArray = stats
    override fun value10(): Int = mastery
    override fun value11(): IntArray = cards

    override fun value1(value: Int?): PlayerCharacterRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Int?): PlayerCharacterRecord {
        set(1, value)
        return this
    }

    override fun value3(value: Int?): PlayerCharacterRecord {
        set(2, value)
        return this
    }

    override fun value4(value: Int?): PlayerCharacterRecord {
        set(3, value)
        return this
    }

    override fun value5(value: IntArray?): PlayerCharacterRecord {
        set(4, value)
        return this
    }

    override fun value6(value: IntArray?): PlayerCharacterRecord {
        set(5, value)
        return this
    }

    override fun value7(value: IntArray?): PlayerCharacterRecord {
        set(6, value)
        return this
    }

    override fun value8(value: Int?): PlayerCharacterRecord {
        set(7, value)
        return this
    }

    override fun value9(value: IntArray?): PlayerCharacterRecord {
        set(8, value)
        return this
    }

    override fun value10(value: Int?): PlayerCharacterRecord {
        set(9, value)
        return this
    }

    override fun value11(value: IntArray?): PlayerCharacterRecord {
        set(10, value)
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: Int?, value4: Int?, value5: IntArray?, value6: IntArray?, value7: IntArray?, value8: Int?, value9: IntArray?, value10: Int?, value11: IntArray?): PlayerCharacterRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        this.value11(value11)
        return this
    }

    /**
     * Create a detached, initialised PlayerCharacterRecord
     */
    constructor(uid: Int? = null, accountUid: Int, iffId: Int, hairColor: Int, partIffIds: IntArray, partUids: IntArray, auxParts: IntArray, cutinIffId: Int, stats: IntArray, mastery: Int, cards: IntArray): this() {
        this.uid = uid
        this.accountUid = accountUid
        this.iffId = iffId
        this.hairColor = hairColor
        this.partIffIds = partIffIds
        this.partUids = partUids
        this.auxParts = auxParts
        this.cutinIffId = cutinIffId
        this.stats = stats
        this.mastery = mastery
        this.cards = cards
        resetChangedOnNotNull()
    }
}
