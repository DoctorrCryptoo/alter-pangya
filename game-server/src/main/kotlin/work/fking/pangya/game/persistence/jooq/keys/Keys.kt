/*
 * This file is generated by jOOQ.
 */
package work.fking.pangya.game.persistence.jooq.keys


import org.jooq.ForeignKey
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal

import work.fking.pangya.game.persistence.jooq.tables.Account
import work.fking.pangya.game.persistence.jooq.tables.Achievement
import work.fking.pangya.game.persistence.jooq.tables.AchievementMilestone
import work.fking.pangya.game.persistence.jooq.tables.FlywaySchemaHistory
import work.fking.pangya.game.persistence.jooq.tables.PlayerAchievement
import work.fking.pangya.game.persistence.jooq.tables.PlayerAchievementMilestone
import work.fking.pangya.game.persistence.jooq.tables.PlayerCaddie
import work.fking.pangya.game.persistence.jooq.tables.PlayerCharacter
import work.fking.pangya.game.persistence.jooq.tables.PlayerEquipment
import work.fking.pangya.game.persistence.jooq.tables.PlayerInventoryCard
import work.fking.pangya.game.persistence.jooq.tables.PlayerInventoryItem
import work.fking.pangya.game.persistence.jooq.tables.PlayerStatistics
import work.fking.pangya.game.persistence.jooq.tables.records.AccountRecord
import work.fking.pangya.game.persistence.jooq.tables.records.AchievementMilestoneRecord
import work.fking.pangya.game.persistence.jooq.tables.records.AchievementRecord
import work.fking.pangya.game.persistence.jooq.tables.records.FlywaySchemaHistoryRecord
import work.fking.pangya.game.persistence.jooq.tables.records.PlayerAchievementMilestoneRecord
import work.fking.pangya.game.persistence.jooq.tables.records.PlayerAchievementRecord
import work.fking.pangya.game.persistence.jooq.tables.records.PlayerCaddieRecord
import work.fking.pangya.game.persistence.jooq.tables.records.PlayerCharacterRecord
import work.fking.pangya.game.persistence.jooq.tables.records.PlayerEquipmentRecord
import work.fking.pangya.game.persistence.jooq.tables.records.PlayerInventoryCardRecord
import work.fking.pangya.game.persistence.jooq.tables.records.PlayerInventoryItemRecord
import work.fking.pangya.game.persistence.jooq.tables.records.PlayerStatisticsRecord



// -------------------------------------------------------------------------
// UNIQUE and PRIMARY KEY definitions
// -------------------------------------------------------------------------

val ACCOUNT_PKEY: UniqueKey<AccountRecord> = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("account_pkey"), arrayOf(Account.ACCOUNT.UID), true)
val ACHIEVEMENT_PKEY: UniqueKey<AchievementRecord> = Internal.createUniqueKey(Achievement.ACHIEVEMENT, DSL.name("achievement_pkey"), arrayOf(Achievement.ACHIEVEMENT.IFF_ID), true)
val ACHIEVEMENT_MILESTONE_PKEY: UniqueKey<AchievementMilestoneRecord> = Internal.createUniqueKey(AchievementMilestone.ACHIEVEMENT_MILESTONE, DSL.name("achievement_milestone_pkey"), arrayOf(AchievementMilestone.ACHIEVEMENT_MILESTONE.IFF_ID), true)
val FLYWAY_SCHEMA_HISTORY_PK: UniqueKey<FlywaySchemaHistoryRecord> = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), arrayOf(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK), true)
val PLAYER_ACHIEVEMENT_PKEY: UniqueKey<PlayerAchievementRecord> = Internal.createUniqueKey(PlayerAchievement.PLAYER_ACHIEVEMENT, DSL.name("player_achievement_pkey"), arrayOf(PlayerAchievement.PLAYER_ACHIEVEMENT.UID), true)
val PLAYER_ACHIEVEMENT_MILESTONE_PKEY: UniqueKey<PlayerAchievementMilestoneRecord> = Internal.createUniqueKey(PlayerAchievementMilestone.PLAYER_ACHIEVEMENT_MILESTONE, DSL.name("player_achievement_milestone_pkey"), arrayOf(PlayerAchievementMilestone.PLAYER_ACHIEVEMENT_MILESTONE.UID), true)
val PLAYER_CADDIE_PKEY: UniqueKey<PlayerCaddieRecord> = Internal.createUniqueKey(PlayerCaddie.PLAYER_CADDIE, DSL.name("player_caddie_pkey"), arrayOf(PlayerCaddie.PLAYER_CADDIE.UID), true)
val PLAYER_CHARACTER_PKEY: UniqueKey<PlayerCharacterRecord> = Internal.createUniqueKey(PlayerCharacter.PLAYER_CHARACTER, DSL.name("player_character_pkey"), arrayOf(PlayerCharacter.PLAYER_CHARACTER.UID), true)
val PLAYER_EQUIPMENT_PKEY: UniqueKey<PlayerEquipmentRecord> = Internal.createUniqueKey(PlayerEquipment.PLAYER_EQUIPMENT, DSL.name("player_equipment_pkey"), arrayOf(PlayerEquipment.PLAYER_EQUIPMENT.ACCOUNT_UID), true)
val PLAYER_INVENTORY_CARD_PKEY: UniqueKey<PlayerInventoryCardRecord> = Internal.createUniqueKey(PlayerInventoryCard.PLAYER_INVENTORY_CARD, DSL.name("player_inventory_card_pkey"), arrayOf(PlayerInventoryCard.PLAYER_INVENTORY_CARD.UID), true)
val PLAYER_INVENTORY_ITEM_PKEY: UniqueKey<PlayerInventoryItemRecord> = Internal.createUniqueKey(PlayerInventoryItem.PLAYER_INVENTORY_ITEM, DSL.name("player_inventory_item_pkey"), arrayOf(PlayerInventoryItem.PLAYER_INVENTORY_ITEM.UID), true)
val PLAYER_STATISTICS_PKEY: UniqueKey<PlayerStatisticsRecord> = Internal.createUniqueKey(PlayerStatistics.PLAYER_STATISTICS, DSL.name("player_statistics_pkey"), arrayOf(PlayerStatistics.PLAYER_STATISTICS.ACCOUNT_UID), true)

// -------------------------------------------------------------------------
// FOREIGN KEY definitions
// -------------------------------------------------------------------------

val ACHIEVEMENT_MILESTONE__FK__ACHIEVEMENT_MILESTONE: ForeignKey<AchievementMilestoneRecord, AchievementRecord> = Internal.createForeignKey(AchievementMilestone.ACHIEVEMENT_MILESTONE, DSL.name("fk__achievement_milestone"), arrayOf(AchievementMilestone.ACHIEVEMENT_MILESTONE.ACHIEVEMENT_IFF_ID), work.fking.pangya.game.persistence.jooq.keys.ACHIEVEMENT_PKEY, arrayOf(Achievement.ACHIEVEMENT.IFF_ID), true)
val PLAYER_ACHIEVEMENT__FK_PLAYER_ACHIEVEMENT__ACCOUNT: ForeignKey<PlayerAchievementRecord, AccountRecord> = Internal.createForeignKey(PlayerAchievement.PLAYER_ACHIEVEMENT, DSL.name("fk_player_achievement__account"), arrayOf(PlayerAchievement.PLAYER_ACHIEVEMENT.ACCOUNT_UID), work.fking.pangya.game.persistence.jooq.keys.ACCOUNT_PKEY, arrayOf(Account.ACCOUNT.UID), true)
val PLAYER_ACHIEVEMENT_MILESTONE__FK_PLAYER_ACHIEVEMENT_MILESTONE__PLAYER_ACHIEVEMENT: ForeignKey<PlayerAchievementMilestoneRecord, PlayerAchievementRecord> = Internal.createForeignKey(PlayerAchievementMilestone.PLAYER_ACHIEVEMENT_MILESTONE, DSL.name("fk_player_achievement_milestone__player_achievement"), arrayOf(PlayerAchievementMilestone.PLAYER_ACHIEVEMENT_MILESTONE.PLAYER_ACHIEVEMENT_UID), work.fking.pangya.game.persistence.jooq.keys.PLAYER_ACHIEVEMENT_PKEY, arrayOf(PlayerAchievement.PLAYER_ACHIEVEMENT.UID), true)
val PLAYER_CADDIE__FK_PLAYER_CADDIE__ACCOUNT: ForeignKey<PlayerCaddieRecord, AccountRecord> = Internal.createForeignKey(PlayerCaddie.PLAYER_CADDIE, DSL.name("fk_player_caddie__account"), arrayOf(PlayerCaddie.PLAYER_CADDIE.ACCOUNT_UID), work.fking.pangya.game.persistence.jooq.keys.ACCOUNT_PKEY, arrayOf(Account.ACCOUNT.UID), true)
val PLAYER_CHARACTER__FK_PLAYER_CHARACTER__ACCOUNT: ForeignKey<PlayerCharacterRecord, AccountRecord> = Internal.createForeignKey(PlayerCharacter.PLAYER_CHARACTER, DSL.name("fk_player_character__account"), arrayOf(PlayerCharacter.PLAYER_CHARACTER.ACCOUNT_UID), work.fking.pangya.game.persistence.jooq.keys.ACCOUNT_PKEY, arrayOf(Account.ACCOUNT.UID), true)
val PLAYER_EQUIPMENT__FK_PLAYER_STATISTICS__ACCOUNT: ForeignKey<PlayerEquipmentRecord, AccountRecord> = Internal.createForeignKey(PlayerEquipment.PLAYER_EQUIPMENT, DSL.name("fk_player_statistics__account"), arrayOf(PlayerEquipment.PLAYER_EQUIPMENT.ACCOUNT_UID), work.fking.pangya.game.persistence.jooq.keys.ACCOUNT_PKEY, arrayOf(Account.ACCOUNT.UID), true)
val PLAYER_INVENTORY_CARD__FK_PLAYER_INVENTORY_ITEM__ACCOUNT: ForeignKey<PlayerInventoryCardRecord, AccountRecord> = Internal.createForeignKey(PlayerInventoryCard.PLAYER_INVENTORY_CARD, DSL.name("fk_player_inventory_item__account"), arrayOf(PlayerInventoryCard.PLAYER_INVENTORY_CARD.ACCOUNT_UID), work.fking.pangya.game.persistence.jooq.keys.ACCOUNT_PKEY, arrayOf(Account.ACCOUNT.UID), true)
val PLAYER_INVENTORY_ITEM__FK_PLAYER_INVENTORY_ITEM__ACCOUNT: ForeignKey<PlayerInventoryItemRecord, AccountRecord> = Internal.createForeignKey(PlayerInventoryItem.PLAYER_INVENTORY_ITEM, DSL.name("fk_player_inventory_item__account"), arrayOf(PlayerInventoryItem.PLAYER_INVENTORY_ITEM.ACCOUNT_UID), work.fking.pangya.game.persistence.jooq.keys.ACCOUNT_PKEY, arrayOf(Account.ACCOUNT.UID), true)
val PLAYER_STATISTICS__FK_PLAYER_STATISTICS__ACCOUNT: ForeignKey<PlayerStatisticsRecord, AccountRecord> = Internal.createForeignKey(PlayerStatistics.PLAYER_STATISTICS, DSL.name("fk_player_statistics__account"), arrayOf(PlayerStatistics.PLAYER_STATISTICS.ACCOUNT_UID), work.fking.pangya.game.persistence.jooq.keys.ACCOUNT_PKEY, arrayOf(Account.ACCOUNT.UID), true)
