/*
 * This file is generated by jOOQ.
 */
package work.fking.pangya.game.persistence.jooq.tables


import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import work.fking.pangya.game.persistence.jooq.AlterPangya
import work.fking.pangya.game.persistence.jooq.indexes.IDX_PLAYER_ACHIEVEMENT
import work.fking.pangya.game.persistence.jooq.keys.PLAYER_ACHIEVEMENT_PKEY
import work.fking.pangya.game.persistence.jooq.keys.PLAYER_ACHIEVEMENT__FK_PLAYER_ACHIEVEMENT__ACCOUNT
import work.fking.pangya.game.persistence.jooq.tables.records.PlayerAchievementRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PlayerAchievement(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, PlayerAchievementRecord>?,
    aliased: Table<PlayerAchievementRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<PlayerAchievementRecord>(
    alias,
    AlterPangya.ALTER_PANGYA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>alter_pangya.player_achievement</code>
         */
        val PLAYER_ACHIEVEMENT: PlayerAchievement = PlayerAchievement()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PlayerAchievementRecord> = PlayerAchievementRecord::class.java

    /**
     * The column <code>alter_pangya.player_achievement.uid</code>.
     */
    val UID: TableField<PlayerAchievementRecord, Int?> = createField(DSL.name("uid"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>alter_pangya.player_achievement.account_uid</code>.
     */
    val ACCOUNT_UID: TableField<PlayerAchievementRecord, Int?> = createField(DSL.name("account_uid"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>alter_pangya.player_achievement.iff_id</code>.
     */
    val IFF_ID: TableField<PlayerAchievementRecord, Int?> = createField(DSL.name("iff_id"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<PlayerAchievementRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<PlayerAchievementRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>alter_pangya.player_achievement</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>alter_pangya.player_achievement</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>alter_pangya.player_achievement</code> table reference
     */
    constructor(): this(DSL.name("player_achievement"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, PlayerAchievementRecord>): this(Internal.createPathAlias(child, key), child, key, PLAYER_ACHIEVEMENT, null)
    override fun getSchema(): Schema? = if (aliased()) null else AlterPangya.ALTER_PANGYA
    override fun getIndexes(): List<Index> = listOf(IDX_PLAYER_ACHIEVEMENT)
    override fun getIdentity(): Identity<PlayerAchievementRecord, Int?> = super.getIdentity() as Identity<PlayerAchievementRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<PlayerAchievementRecord> = PLAYER_ACHIEVEMENT_PKEY
    override fun getReferences(): List<ForeignKey<PlayerAchievementRecord, *>> = listOf(PLAYER_ACHIEVEMENT__FK_PLAYER_ACHIEVEMENT__ACCOUNT)

    private lateinit var _account: Account

    /**
     * Get the implicit join path to the <code>alter_pangya.account</code>
     * table.
     */
    fun account(): Account {
        if (!this::_account.isInitialized)
            _account = Account(this, PLAYER_ACHIEVEMENT__FK_PLAYER_ACHIEVEMENT__ACCOUNT)

        return _account;
    }

    val account: Account
        get(): Account = account()
    override fun `as`(alias: String): PlayerAchievement = PlayerAchievement(DSL.name(alias), this)
    override fun `as`(alias: Name): PlayerAchievement = PlayerAchievement(alias, this)
    override fun `as`(alias: Table<*>): PlayerAchievement = PlayerAchievement(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PlayerAchievement = PlayerAchievement(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PlayerAchievement = PlayerAchievement(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PlayerAchievement = PlayerAchievement(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<Int?, Int?, Int?> = super.fieldsRow() as Row3<Int?, Int?, Int?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, Int?, Int?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, Int?, Int?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
