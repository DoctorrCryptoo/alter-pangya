/*
 * This file is generated by jOOQ.
 */
package work.fking.pangya.game.persistence.jooq.tables.records


import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl

import work.fking.pangya.game.persistence.jooq.tables.PlayerAchievementMilestone


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PlayerAchievementMilestoneRecord private constructor() : UpdatableRecordImpl<PlayerAchievementMilestoneRecord>(PlayerAchievementMilestone.PLAYER_ACHIEVEMENT_MILESTONE), Record5<Int?, Int?, Int?, Int?, OffsetDateTime?> {

    open var uid: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var playerAchievementUid: Int
        set(value): Unit = set(1, value)
        get(): Int = get(1) as Int

    open var iffId: Int
        set(value): Unit = set(2, value)
        get(): Int = get(2) as Int

    open var progress: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var completedAt: OffsetDateTime?
        set(value): Unit = set(4, value)
        get(): OffsetDateTime? = get(4) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<Int?, Int?, Int?, Int?, OffsetDateTime?> = super.fieldsRow() as Row5<Int?, Int?, Int?, Int?, OffsetDateTime?>
    override fun valuesRow(): Row5<Int?, Int?, Int?, Int?, OffsetDateTime?> = super.valuesRow() as Row5<Int?, Int?, Int?, Int?, OffsetDateTime?>
    override fun field1(): Field<Int?> = PlayerAchievementMilestone.PLAYER_ACHIEVEMENT_MILESTONE.UID
    override fun field2(): Field<Int?> = PlayerAchievementMilestone.PLAYER_ACHIEVEMENT_MILESTONE.PLAYER_ACHIEVEMENT_UID
    override fun field3(): Field<Int?> = PlayerAchievementMilestone.PLAYER_ACHIEVEMENT_MILESTONE.IFF_ID
    override fun field4(): Field<Int?> = PlayerAchievementMilestone.PLAYER_ACHIEVEMENT_MILESTONE.PROGRESS
    override fun field5(): Field<OffsetDateTime?> = PlayerAchievementMilestone.PLAYER_ACHIEVEMENT_MILESTONE.COMPLETED_AT
    override fun component1(): Int? = uid
    override fun component2(): Int = playerAchievementUid
    override fun component3(): Int = iffId
    override fun component4(): Int? = progress
    override fun component5(): OffsetDateTime? = completedAt
    override fun value1(): Int? = uid
    override fun value2(): Int = playerAchievementUid
    override fun value3(): Int = iffId
    override fun value4(): Int? = progress
    override fun value5(): OffsetDateTime? = completedAt

    override fun value1(value: Int?): PlayerAchievementMilestoneRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Int?): PlayerAchievementMilestoneRecord {
        set(1, value)
        return this
    }

    override fun value3(value: Int?): PlayerAchievementMilestoneRecord {
        set(2, value)
        return this
    }

    override fun value4(value: Int?): PlayerAchievementMilestoneRecord {
        set(3, value)
        return this
    }

    override fun value5(value: OffsetDateTime?): PlayerAchievementMilestoneRecord {
        set(4, value)
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: Int?, value4: Int?, value5: OffsetDateTime?): PlayerAchievementMilestoneRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    /**
     * Create a detached, initialised PlayerAchievementMilestoneRecord
     */
    constructor(uid: Int? = null, playerAchievementUid: Int, iffId: Int, progress: Int? = null, completedAt: OffsetDateTime? = null): this() {
        this.uid = uid
        this.playerAchievementUid = playerAchievementUid
        this.iffId = iffId
        this.progress = progress
        this.completedAt = completedAt
        resetChangedOnNotNull()
    }
}
