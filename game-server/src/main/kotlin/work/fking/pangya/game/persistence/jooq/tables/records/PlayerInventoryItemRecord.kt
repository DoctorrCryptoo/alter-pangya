/*
 * This file is generated by jOOQ.
 */
package work.fking.pangya.game.persistence.jooq.tables.records


import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record7
import org.jooq.Row7
import org.jooq.impl.UpdatableRecordImpl

import work.fking.pangya.game.persistence.jooq.tables.PlayerInventoryItem
import work.fking.pangya.game.player.ItemClubWorkshop
import work.fking.pangya.game.player.ItemUcc


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PlayerInventoryItemRecord private constructor() : UpdatableRecordImpl<PlayerInventoryItemRecord>(PlayerInventoryItem.PLAYER_INVENTORY_ITEM), Record7<Int?, Int?, Int?, Int?, IntArray?, ItemUcc?, ItemClubWorkshop?> {

    open var uid: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var accountUid: Int
        set(value): Unit = set(1, value)
        get(): Int = get(1) as Int

    open var iffId: Int
        set(value): Unit = set(2, value)
        get(): Int = get(2) as Int

    open var quantity: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var stats: IntArray?
        set(value): Unit = set(4, value)
        get(): IntArray? = get(4) as IntArray?

    open var ucc: ItemUcc?
        set(value): Unit = set(5, value)
        get(): ItemUcc? = get(5) as ItemUcc?

    open var clubWorkshop: ItemClubWorkshop?
        set(value): Unit = set(6, value)
        get(): ItemClubWorkshop? = get(6) as ItemClubWorkshop?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row7<Int?, Int?, Int?, Int?, IntArray?, ItemUcc?, ItemClubWorkshop?> = super.fieldsRow() as Row7<Int?, Int?, Int?, Int?, IntArray?, ItemUcc?, ItemClubWorkshop?>
    override fun valuesRow(): Row7<Int?, Int?, Int?, Int?, IntArray?, ItemUcc?, ItemClubWorkshop?> = super.valuesRow() as Row7<Int?, Int?, Int?, Int?, IntArray?, ItemUcc?, ItemClubWorkshop?>
    override fun field1(): Field<Int?> = PlayerInventoryItem.PLAYER_INVENTORY_ITEM.UID
    override fun field2(): Field<Int?> = PlayerInventoryItem.PLAYER_INVENTORY_ITEM.ACCOUNT_UID
    override fun field3(): Field<Int?> = PlayerInventoryItem.PLAYER_INVENTORY_ITEM.IFF_ID
    override fun field4(): Field<Int?> = PlayerInventoryItem.PLAYER_INVENTORY_ITEM.QUANTITY
    override fun field5(): Field<IntArray?> = PlayerInventoryItem.PLAYER_INVENTORY_ITEM.STATS
    override fun field6(): Field<ItemUcc?> = PlayerInventoryItem.PLAYER_INVENTORY_ITEM.UCC
    override fun field7(): Field<ItemClubWorkshop?> = PlayerInventoryItem.PLAYER_INVENTORY_ITEM.CLUB_WORKSHOP
    override fun component1(): Int? = uid
    override fun component2(): Int = accountUid
    override fun component3(): Int = iffId
    override fun component4(): Int? = quantity
    override fun component5(): IntArray? = stats
    override fun component6(): ItemUcc? = ucc
    override fun component7(): ItemClubWorkshop? = clubWorkshop
    override fun value1(): Int? = uid
    override fun value2(): Int = accountUid
    override fun value3(): Int = iffId
    override fun value4(): Int? = quantity
    override fun value5(): IntArray? = stats
    override fun value6(): ItemUcc? = ucc
    override fun value7(): ItemClubWorkshop? = clubWorkshop

    override fun value1(value: Int?): PlayerInventoryItemRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Int?): PlayerInventoryItemRecord {
        set(1, value)
        return this
    }

    override fun value3(value: Int?): PlayerInventoryItemRecord {
        set(2, value)
        return this
    }

    override fun value4(value: Int?): PlayerInventoryItemRecord {
        set(3, value)
        return this
    }

    override fun value5(value: IntArray?): PlayerInventoryItemRecord {
        set(4, value)
        return this
    }

    override fun value6(value: ItemUcc?): PlayerInventoryItemRecord {
        set(5, value)
        return this
    }

    override fun value7(value: ItemClubWorkshop?): PlayerInventoryItemRecord {
        set(6, value)
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: Int?, value4: Int?, value5: IntArray?, value6: ItemUcc?, value7: ItemClubWorkshop?): PlayerInventoryItemRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        return this
    }

    /**
     * Create a detached, initialised PlayerInventoryItemRecord
     */
    constructor(uid: Int? = null, accountUid: Int, iffId: Int, quantity: Int? = null, stats: IntArray? = null, ucc: ItemUcc? = null, clubWorkshop: ItemClubWorkshop? = null): this() {
        this.uid = uid
        this.accountUid = accountUid
        this.iffId = iffId
        this.quantity = quantity
        this.stats = stats
        this.ucc = ucc
        this.clubWorkshop = clubWorkshop
        resetChangedOnNotNull()
    }
}
