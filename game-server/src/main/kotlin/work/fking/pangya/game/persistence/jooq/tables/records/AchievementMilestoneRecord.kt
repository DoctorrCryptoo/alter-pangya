/*
 * This file is generated by jOOQ.
 */
package work.fking.pangya.game.persistence.jooq.tables.records


import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl

import work.fking.pangya.game.persistence.jooq.tables.AchievementMilestone


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AchievementMilestoneRecord private constructor() : UpdatableRecordImpl<AchievementMilestoneRecord>(AchievementMilestone.ACHIEVEMENT_MILESTONE), Record3<Int?, Int?, String?> {

    open var iffId: Int
        set(value): Unit = set(0, value)
        get(): Int = get(0) as Int

    open var achievementIffId: Int
        set(value): Unit = set(1, value)
        get(): Int = get(1) as Int

    open var name: String
        set(value): Unit = set(2, value)
        get(): String = get(2) as String

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<Int?, Int?, String?> = super.fieldsRow() as Row3<Int?, Int?, String?>
    override fun valuesRow(): Row3<Int?, Int?, String?> = super.valuesRow() as Row3<Int?, Int?, String?>
    override fun field1(): Field<Int?> = AchievementMilestone.ACHIEVEMENT_MILESTONE.IFF_ID
    override fun field2(): Field<Int?> = AchievementMilestone.ACHIEVEMENT_MILESTONE.ACHIEVEMENT_IFF_ID
    override fun field3(): Field<String?> = AchievementMilestone.ACHIEVEMENT_MILESTONE.NAME
    override fun component1(): Int = iffId
    override fun component2(): Int = achievementIffId
    override fun component3(): String = name
    override fun value1(): Int = iffId
    override fun value2(): Int = achievementIffId
    override fun value3(): String = name

    override fun value1(value: Int?): AchievementMilestoneRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Int?): AchievementMilestoneRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): AchievementMilestoneRecord {
        set(2, value)
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: String?): AchievementMilestoneRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised AchievementMilestoneRecord
     */
    constructor(iffId: Int, achievementIffId: Int, name: String): this() {
        this.iffId = iffId
        this.achievementIffId = achievementIffId
        this.name = name
        resetChangedOnNotNull()
    }
}
